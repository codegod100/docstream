var Et=Object.defineProperty;var kt=(n,e,t)=>e in n?Et(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var fe=(n,e,t)=>(kt(n,typeof e!="symbol"?e+"":e,t),t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const r of i)if(r.type==="childList")for(const o of r.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&s(o)}).observe(document,{childList:!0,subtree:!0});function t(i){const r={};return i.integrity&&(r.integrity=i.integrity),i.referrerPolicy&&(r.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?r.credentials="include":i.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(i){if(i.ep)return;i.ep=!0;const r=t(i);fetch(i.href,r)}})();function q(){}function Ze(n){return n()}function Ie(){return Object.create(null)}function V(n){n.forEach(Ze)}function et(n){return typeof n=="function"}function ce(n,e){return n!=n?e==e:n!==e||n&&typeof n=="object"||typeof n=="function"}function Tt(n){return Object.keys(n).length===0}function B(n,e){n.appendChild(e)}function T(n,e,t){n.insertBefore(e,t||null)}function k(n){n.parentNode&&n.parentNode.removeChild(n)}function tt(n,e){for(let t=0;t<n.length;t+=1)n[t]&&n[t].d(e)}function x(n){return document.createElement(n)}function N(n){return document.createTextNode(n)}function re(){return N(" ")}function nt(){return N("")}function ee(n,e,t,s){return n.addEventListener(e,t,s),()=>n.removeEventListener(e,t,s)}function m(n,e,t){t==null?n.removeAttribute(e):n.getAttribute(e)!==t&&n.setAttribute(e,t)}function At(n){return Array.from(n.childNodes)}function st(n,e){e=""+e,n.data!==e&&(n.data=e)}function L(n,e,t,s){t==null?n.style.removeProperty(e):n.style.setProperty(e,t,s?"important":"")}let Y;function J(n){Y=n}function it(){if(!Y)throw new Error("Function called outside component initialization");return Y}function Ot(n){it().$$.on_mount.push(n)}function rt(n){it().$$.after_update.push(n)}const I=[],$=[];let M=[];const ye=[],Rt=Promise.resolve();let be=!1;function Ct(){be||(be=!0,Rt.then(ot))}function _e(n){M.push(n)}function Ce(n){ye.push(n)}const de=new Set;let D=0;function ot(){if(D!==0)return;const n=Y;do{try{for(;D<I.length;){const e=I[D];D++,J(e),St(e.$$)}}catch(e){throw I.length=0,D=0,e}for(J(null),I.length=0,D=0;$.length;)$.pop()();for(let e=0;e<M.length;e+=1){const t=M[e];de.has(t)||(de.add(t),t())}M.length=0}while(I.length);for(;ye.length;)ye.pop()();be=!1,de.clear(),J(n)}function St(n){if(n.fragment!==null){n.update(),V(n.before_update);const e=n.dirty;n.dirty=[-1],n.fragment&&n.fragment.p(n.ctx,e),n.after_update.forEach(_e)}}function Bt(n){const e=[],t=[];M.forEach(s=>n.indexOf(s)===-1?e.push(s):t.push(s)),t.forEach(s=>s()),M=e}const te=new Set;let P;function we(){P={r:0,c:[],p:P}}function ve(){P.r||V(P.c),P=P.p}function _(n,e){n&&n.i&&(te.delete(n),n.i(e))}function A(n,e,t,s){if(n&&n.o){if(te.has(n))return;te.add(n),P.c.push(()=>{te.delete(n),s&&(t&&n.d(1),s())}),n.o(e)}else s&&s()}function oe(n){return(n==null?void 0:n.length)!==void 0?n:Array.from(n)}function Se(n,e,t){const s=n.$$.props[e];s!==void 0&&(n.$$.bound[s]=t,t(n.$$.ctx[s]))}function ae(n){n&&n.c()}function z(n,e,t){const{fragment:s,after_update:i}=n.$$;s&&s.m(e,t),_e(()=>{const r=n.$$.on_mount.map(Ze).filter(et);n.$$.on_destroy?n.$$.on_destroy.push(...r):V(r),n.$$.on_mount=[]}),i.forEach(_e)}function X(n,e){const t=n.$$;t.fragment!==null&&(Bt(t.after_update),V(t.on_destroy),t.fragment&&t.fragment.d(e),t.on_destroy=t.fragment=null,t.ctx=[])}function Nt(n,e){n.$$.dirty[0]===-1&&(I.push(n),Ct(),n.$$.dirty.fill(0)),n.$$.dirty[e/31|0]|=1<<e%31}function he(n,e,t,s,i,r,o=null,a=[-1]){const c=Y;J(n);const u=n.$$={fragment:null,ctx:[],props:r,update:q,not_equal:i,bound:Ie(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(c?c.$$.context:[])),callbacks:Ie(),dirty:a,skip_bound:!1,root:e.target||c.$$.root};o&&o(u.root);let l=!1;if(u.ctx=t?t(n,e.props||{},(h,f,...y)=>{const C=y.length?y[0]:f;return u.ctx&&i(u.ctx[h],u.ctx[h]=C)&&(!u.skip_bound&&u.bound[h]&&u.bound[h](C),l&&Nt(n,h)),f}):[],u.update(),l=!0,V(u.before_update),u.fragment=s?s(u.ctx):!1,e.target){if(e.hydrate){const h=At(e.target);u.fragment&&u.fragment.l(h),h.forEach(k)}else u.fragment&&u.fragment.c();e.intro&&_(n.$$.fragment),z(n,e.target,e.anchor),ot()}J(c)}class ue{constructor(){fe(this,"$$");fe(this,"$$set")}$destroy(){X(this,1),this.$destroy=q}$on(e,t){if(!et(t))return q;const s=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return s.push(t),()=>{const i=s.indexOf(t);i!==-1&&s.splice(i,1)}}$set(e){this.$$set&&!Tt(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const Lt="4";typeof window<"u"&&(window.__svelte||(window.__svelte={v:new Set})).v.add(Lt);function F(n){let e=5381;for(let i=0;i<n.length;i++)e=(e<<360)+e+n.charCodeAt(i);return`hsl(${Math.abs(e*.618033988749895%1*360)}turn, 50%,  70%)`}function Pt(n){return console.log(typeof n),n.map(e=>{let t={};for(let[s,i]of Object.entries(e))t[s]=i;return t})}function xt(n){let e,t,s=n[1].content+"",i,r,o,a,c,u,l;return{c(){e=x("div"),t=x("div"),a=re(),c=x("button"),c.textContent="[ X ]",m(t,"class","grow"),m(t,"id",i=n[1].id),m(t,"role","textbox"),m(t,"tabindex","0"),m(t,"data-author",r=n[1].author),m(t,"data-id",o=n[1].id),L(t,"background-color",n[2]),m(t,"contenteditable","true"),m(c,"class","bg-red-500 btn btn-blue w-50px"),m(e,"class","flex"),L(e,"padding-left",n[3]+"px")},m(h,f){T(h,e,f),B(e,t),t.innerHTML=s,B(e,a),B(e,c),u||(l=[ee(t,"blur",n[5]),ee(t,"keydown",n[6]),ee(c,"click",n[7])],u=!0)},p(h,[f]){f&2&&s!==(s=h[1].content+"")&&(t.innerHTML=s),f&2&&i!==(i=h[1].id)&&m(t,"id",i),f&2&&r!==(r=h[1].author)&&m(t,"data-author",r),f&2&&o!==(o=h[1].id)&&m(t,"data-id",o)},i:q,o:q,d(h){h&&k(e),u=!1,V(l)}}}function qt(n){return new DOMParser().parseFromString(n,"text/html").documentElement.innerHTML}function Dt(n,e,t){let{counter:s}=e,{io:i}=e,{blip:r}=e,o=F(r.author),a=s*5;rt(()=>{var f;console.log("blip content",r.content),r.focus&&((f=document.getElementById(r.id))==null||f.focus());let h=document.getElementById(r.id);if(h){h.innerHTML="";const y=qt(r.content);console.log("fixed",y),h.innerHTML=y}});const c=async h=>{let f=`/edit/${r.id}`,y={content:h.target.innerHTML};await fetch(f,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(y)}),i.emit("content","ok")},u=h=>{h.key==="Enter"&&(h.metaKey||h.ctrlKey)&&document.activeElement.blur()},l=async()=>{let h=`/remove/${r.id}`;await fetch(h,{method:"POST"}),i.emit("content","ok")};return n.$$set=h=>{"counter"in h&&t(4,s=h.counter),"io"in h&&t(0,i=h.io),"blip"in h&&t(1,r=h.blip)},[i,r,o,a,s,c,u,l]}class It extends ue{constructor(e){super(),he(this,e,Dt,xt,ce,{counter:4,io:0,blip:1})}}function Ut(n){let e,t=n[0].content+"",s,i,r,o;return{c(){e=x("div"),m(e,"role","button"),m(e,"tabindex","0"),m(e,"data-author",s=n[0].author),m(e,"data-id",i=n[0].id),L(e,"background-color",n[1]),L(e,"margin-left",n[2]+"px")},m(a,c){T(a,e,c),e.innerHTML=t,r||(o=ee(e,"click",n[3]),r=!0)},p(a,[c]){c&1&&t!==(t=a[0].content+"")&&(e.innerHTML=t),c&1&&s!==(s=a[0].author)&&m(e,"data-author",s),c&1&&i!==(i=a[0].id)&&m(e,"data-id",i)},i:q,o:q,d(a){a&&k(e),r=!1,o()}}}function Mt(n,e,t){let{blip:s}=e,{counter:i}=e,{author:r}=e,o=F(s.author),a=i*5;async function c(){for(const C of s.blips)if(C.author==r){console.log("already have blip member");return}let u=`/add/${s.id}`,l="",y=await(await fetch(u,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({content:l,author:r})})).json();console.log("created id: ",y),t(0,s.blips=[...s.blips,{id:y,blips:[],content:l,author:r,focus:!0}],s)}return n.$$set=u=>{"blip"in u&&t(0,s=u.blip),"counter"in u&&t(4,i=u.counter),"author"in u&&t(5,r=u.author)},[s,o,a,c,i,r]}class Ft extends ue{constructor(e){super(),he(this,e,Mt,Ut,ce,{blip:0,counter:4,author:5})}}function Ue(n,e,t){const s=n.slice();return s[8]=e[t],s[9]=e,s[10]=t,s}function Vt(n){let e,t,s;function i(o){n[6](o,n[8],n[9],n[10])}let r={counter:n[2],author:n[3]};return n[8]!==void 0&&(r.blip=n[8]),e=new Ft({props:r}),$.push(()=>Se(e,"blip",i)),{c(){ae(e.$$.fragment)},m(o,a){z(e,o,a),s=!0},p(o,a){n=o;const c={};a&4&&(c.counter=n[2]),a&8&&(c.author=n[3]),!t&&a&1&&(t=!0,c.blip=n[8],Ce(()=>t=!1)),e.$set(c)},i(o){s||(_(e.$$.fragment,o),s=!0)},o(o){A(e.$$.fragment,o),s=!1},d(o){X(e,o)}}}function Ht(n){let e,t;return e=new It({props:{blip:n[8],counter:n[2],io:n[4]}}),{c(){ae(e.$$.fragment)},m(s,i){z(e,s,i),t=!0},p(s,i){const r={};i&1&&(r.blip=s[8]),i&4&&(r.counter=s[2]),i&16&&(r.io=s[4]),e.$set(r)},i(s){t||(_(e.$$.fragment,s),t=!0)},o(s){A(e.$$.fragment,s),t=!1},d(s){X(e,s)}}}function Me(n){let e,t,s;function i(o){n[7](o)}let r={blips:n[8].blips,counter:n[5],author:n[3],io:n[4]};return n[1]!==void 0&&(r.authors=n[1]),e=new ct({props:r}),$.push(()=>Se(e,"authors",i)),{c(){ae(e.$$.fragment)},m(o,a){z(e,o,a),s=!0},p(o,a){const c={};a&1&&(c.blips=o[8].blips),a&8&&(c.author=o[3]),a&16&&(c.io=o[4]),!t&&a&2&&(t=!0,c.authors=o[1],Ce(()=>t=!1)),e.$set(c)},i(o){s||(_(e.$$.fragment,o),s=!0)},o(o){A(e.$$.fragment,o),s=!1},d(o){X(e,o)}}}function Fe(n){let e,t,s,i,r;const o=[Ht,Vt],a=[];function c(l,h){return l[8].author==l[3]?0:1}e=c(n),t=a[e]=o[e](n);let u=n[8].blips&&Me(n);return{c(){t.c(),s=re(),u&&u.c(),i=nt()},m(l,h){a[e].m(l,h),T(l,s,h),u&&u.m(l,h),T(l,i,h),r=!0},p(l,h){let f=e;e=c(l),e===f?a[e].p(l,h):(we(),A(a[f],1,1,()=>{a[f]=null}),ve(),t=a[e],t?t.p(l,h):(t=a[e]=o[e](l),t.c()),_(t,1),t.m(s.parentNode,s)),l[8].blips?u?(u.p(l,h),h&1&&_(u,1)):(u=Me(l),u.c(),_(u,1),u.m(i.parentNode,i)):u&&(we(),A(u,1,1,()=>{u=null}),ve())},i(l){r||(_(t),_(u),r=!0)},o(l){A(t),A(u),r=!1},d(l){l&&(k(s),k(i)),a[e].d(l),u&&u.d(l)}}}function Kt(n){let e,t,s=oe(n[0]),i=[];for(let o=0;o<s.length;o+=1)i[o]=Fe(Ue(n,s,o));const r=o=>A(i[o],1,1,()=>{i[o]=null});return{c(){for(let o=0;o<i.length;o+=1)i[o].c();e=nt()},m(o,a){for(let c=0;c<i.length;c+=1)i[c]&&i[c].m(o,a);T(o,e,a),t=!0},p(o,[a]){if(a&63){s=oe(o[0]);let c;for(c=0;c<s.length;c+=1){const u=Ue(o,s,c);i[c]?(i[c].p(u,a),_(i[c],1)):(i[c]=Fe(u),i[c].c(),_(i[c],1),i[c].m(e.parentNode,e))}for(we(),c=s.length;c<i.length;c+=1)r(c);ve()}},i(o){if(!t){for(let a=0;a<s.length;a+=1)_(i[a]);t=!0}},o(o){i=i.filter(Boolean);for(let a=0;a<i.length;a+=1)A(i[a]);t=!1},d(o){o&&k(e),tt(i,o)}}}function Wt(n,e,t){let{blips:s}=e,{counter:i}=e,{author:r}=e,{authors:o}=e,{io:a}=e;console.log(r,s),s=Pt(s);let c=i+1;rt(()=>{for(const h of s)o&&t(1,o=o.add(h.author))});function u(h,f,y,C){y[C]=h,t(0,s)}function l(h){o=h,t(1,o)}return n.$$set=h=>{"blips"in h&&t(0,s=h.blips),"counter"in h&&t(2,i=h.counter),"author"in h&&t(3,r=h.author),"authors"in h&&t(1,o=h.authors),"io"in h&&t(4,a=h.io)},[s,o,i,r,a,c,u,l]}class ct extends ue{constructor(e){super(),he(this,e,Wt,Kt,ce,{blips:0,counter:2,author:3,authors:1,io:4})}}const R=Object.create(null);R.open="0";R.close="1";R.ping="2";R.pong="3";R.message="4";R.upgrade="5";R.noop="6";const ne=Object.create(null);Object.keys(R).forEach(n=>{ne[R[n]]=n});const Ee={type:"error",data:"parser error"},at=typeof Blob=="function"||typeof Blob<"u"&&Object.prototype.toString.call(Blob)==="[object BlobConstructor]",ht=typeof ArrayBuffer=="function",ut=n=>typeof ArrayBuffer.isView=="function"?ArrayBuffer.isView(n):n&&n.buffer instanceof ArrayBuffer,Be=({type:n,data:e},t,s)=>at&&e instanceof Blob?t?s(e):Ve(e,s):ht&&(e instanceof ArrayBuffer||ut(e))?t?s(e):Ve(new Blob([e]),s):s(R[n]+(e||"")),Ve=(n,e)=>{const t=new FileReader;return t.onload=function(){const s=t.result.split(",")[1];e("b"+(s||""))},t.readAsDataURL(n)};function He(n){return n instanceof Uint8Array?n:n instanceof ArrayBuffer?new Uint8Array(n):new Uint8Array(n.buffer,n.byteOffset,n.byteLength)}let pe;function Jt(n,e){if(at&&n.data instanceof Blob)return n.data.arrayBuffer().then(He).then(e);if(ht&&(n.data instanceof ArrayBuffer||ut(n.data)))return e(He(n.data));Be(n,!1,t=>{pe||(pe=new TextEncoder),e(pe.encode(t))})}const Ke="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",W=typeof Uint8Array>"u"?[]:new Uint8Array(256);for(let n=0;n<Ke.length;n++)W[Ke.charCodeAt(n)]=n;const Yt=n=>{let e=n.length*.75,t=n.length,s,i=0,r,o,a,c;n[n.length-1]==="="&&(e--,n[n.length-2]==="="&&e--);const u=new ArrayBuffer(e),l=new Uint8Array(u);for(s=0;s<t;s+=4)r=W[n.charCodeAt(s)],o=W[n.charCodeAt(s+1)],a=W[n.charCodeAt(s+2)],c=W[n.charCodeAt(s+3)],l[i++]=r<<2|o>>4,l[i++]=(o&15)<<4|a>>2,l[i++]=(a&3)<<6|c&63;return u},$t=typeof ArrayBuffer=="function",Ne=(n,e)=>{if(typeof n!="string")return{type:"message",data:lt(n,e)};const t=n.charAt(0);return t==="b"?{type:"message",data:zt(n.substring(1),e)}:ne[t]?n.length>1?{type:ne[t],data:n.substring(1)}:{type:ne[t]}:Ee},zt=(n,e)=>{if($t){const t=Yt(n);return lt(t,e)}else return{base64:!0,data:n}},lt=(n,e)=>{switch(e){case"blob":return n instanceof Blob?n:new Blob([n]);case"arraybuffer":default:return n instanceof ArrayBuffer?n:n.buffer}},ft=String.fromCharCode(30),Xt=(n,e)=>{const t=n.length,s=new Array(t);let i=0;n.forEach((r,o)=>{Be(r,!1,a=>{s[o]=a,++i===t&&e(s.join(ft))})})},jt=(n,e)=>{const t=n.split(ft),s=[];for(let i=0;i<t.length;i++){const r=Ne(t[i],e);if(s.push(r),r.type==="error")break}return s};function Qt(){return new TransformStream({transform(n,e){Jt(n,t=>{const s=t.length;let i;if(s<126)i=new Uint8Array(1),new DataView(i.buffer).setUint8(0,s);else if(s<65536){i=new Uint8Array(3);const r=new DataView(i.buffer);r.setUint8(0,126),r.setUint16(1,s)}else{i=new Uint8Array(9);const r=new DataView(i.buffer);r.setUint8(0,127),r.setBigUint64(1,BigInt(s))}n.data&&typeof n.data!="string"&&(i[0]|=128),e.enqueue(i),e.enqueue(t)})}})}let ge;function j(n){return n.reduce((e,t)=>e+t.length,0)}function Q(n,e){if(n[0].length===e)return n.shift();const t=new Uint8Array(e);let s=0;for(let i=0;i<e;i++)t[i]=n[0][s++],s===n[0].length&&(n.shift(),s=0);return n.length&&s<n[0].length&&(n[0]=n[0].slice(s)),t}function Gt(n,e){ge||(ge=new TextDecoder);const t=[];let s=0,i=-1,r=!1;return new TransformStream({transform(o,a){for(t.push(o);;){if(s===0){if(j(t)<1)break;const c=Q(t,1);r=(c[0]&128)===128,i=c[0]&127,i<126?s=3:i===126?s=1:s=2}else if(s===1){if(j(t)<2)break;const c=Q(t,2);i=new DataView(c.buffer,c.byteOffset,c.length).getUint16(0),s=3}else if(s===2){if(j(t)<8)break;const c=Q(t,8),u=new DataView(c.buffer,c.byteOffset,c.length),l=u.getUint32(0);if(l>Math.pow(2,53-32)-1){a.enqueue(Ee);break}i=l*Math.pow(2,32)+u.getUint32(4),s=3}else{if(j(t)<i)break;const c=Q(t,i);a.enqueue(Ne(r?c:ge.decode(c),e)),s=0}if(i===0||i>n){a.enqueue(Ee);break}}}})}const dt=4;function g(n){if(n)return Zt(n)}function Zt(n){for(var e in g.prototype)n[e]=g.prototype[e];return n}g.prototype.on=g.prototype.addEventListener=function(n,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+n]=this._callbacks["$"+n]||[]).push(e),this};g.prototype.once=function(n,e){function t(){this.off(n,t),e.apply(this,arguments)}return t.fn=e,this.on(n,t),this};g.prototype.off=g.prototype.removeListener=g.prototype.removeAllListeners=g.prototype.removeEventListener=function(n,e){if(this._callbacks=this._callbacks||{},arguments.length==0)return this._callbacks={},this;var t=this._callbacks["$"+n];if(!t)return this;if(arguments.length==1)return delete this._callbacks["$"+n],this;for(var s,i=0;i<t.length;i++)if(s=t[i],s===e||s.fn===e){t.splice(i,1);break}return t.length===0&&delete this._callbacks["$"+n],this};g.prototype.emit=function(n){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),t=this._callbacks["$"+n],s=1;s<arguments.length;s++)e[s-1]=arguments[s];if(t){t=t.slice(0);for(var s=0,i=t.length;s<i;++s)t[s].apply(this,e)}return this};g.prototype.emitReserved=g.prototype.emit;g.prototype.listeners=function(n){return this._callbacks=this._callbacks||{},this._callbacks["$"+n]||[]};g.prototype.hasListeners=function(n){return!!this.listeners(n).length};const v=(()=>typeof self<"u"?self:typeof window<"u"?window:Function("return this")())();function pt(n,...e){return e.reduce((t,s)=>(n.hasOwnProperty(s)&&(t[s]=n[s]),t),{})}const en=v.setTimeout,tn=v.clearTimeout;function le(n,e){e.useNativeTimers?(n.setTimeoutFn=en.bind(v),n.clearTimeoutFn=tn.bind(v)):(n.setTimeoutFn=v.setTimeout.bind(v),n.clearTimeoutFn=v.clearTimeout.bind(v))}const nn=1.33;function sn(n){return typeof n=="string"?rn(n):Math.ceil((n.byteLength||n.size)*nn)}function rn(n){let e=0,t=0;for(let s=0,i=n.length;s<i;s++)e=n.charCodeAt(s),e<128?t+=1:e<2048?t+=2:e<55296||e>=57344?t+=3:(s++,t+=4);return t}function on(n){let e="";for(let t in n)n.hasOwnProperty(t)&&(e.length&&(e+="&"),e+=encodeURIComponent(t)+"="+encodeURIComponent(n[t]));return e}function cn(n){let e={},t=n.split("&");for(let s=0,i=t.length;s<i;s++){let r=t[s].split("=");e[decodeURIComponent(r[0])]=decodeURIComponent(r[1])}return e}class an extends Error{constructor(e,t,s){super(e),this.description=t,this.context=s,this.type="TransportError"}}class Le extends g{constructor(e){super(),this.writable=!1,le(this,e),this.opts=e,this.query=e.query,this.socket=e.socket}onError(e,t,s){return super.emitReserved("error",new an(e,t,s)),this}open(){return this.readyState="opening",this.doOpen(),this}close(){return(this.readyState==="opening"||this.readyState==="open")&&(this.doClose(),this.onClose()),this}send(e){this.readyState==="open"&&this.write(e)}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(e){const t=Ne(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){super.emitReserved("packet",e)}onClose(e){this.readyState="closed",super.emitReserved("close",e)}pause(e){}createUri(e,t={}){return e+"://"+this._hostname()+this._port()+this.opts.path+this._query(t)}_hostname(){const e=this.opts.hostname;return e.indexOf(":")===-1?e:"["+e+"]"}_port(){return this.opts.port&&(this.opts.secure&&+(this.opts.port!==443)||!this.opts.secure&&Number(this.opts.port)!==80)?":"+this.opts.port:""}_query(e){const t=on(e);return t.length?"?"+t:""}}const gt="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),ke=64,hn={};let We=0,G=0,Je;function Ye(n){let e="";do e=gt[n%ke]+e,n=Math.floor(n/ke);while(n>0);return e}function mt(){const n=Ye(+new Date);return n!==Je?(We=0,Je=n):n+"."+Ye(We++)}for(;G<ke;G++)hn[gt[G]]=G;let yt=!1;try{yt=typeof XMLHttpRequest<"u"&&"withCredentials"in new XMLHttpRequest}catch{}const un=yt;function bt(n){const e=n.xdomain;try{if(typeof XMLHttpRequest<"u"&&(!e||un))return new XMLHttpRequest}catch{}if(!e)try{return new v[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP")}catch{}}function ln(){}const fn=function(){return new bt({xdomain:!1}).responseType!=null}();class dn extends Le{constructor(e){if(super(e),this.polling=!1,typeof location<"u"){const s=location.protocol==="https:";let i=location.port;i||(i=s?"443":"80"),this.xd=typeof location<"u"&&e.hostname!==location.hostname||i!==e.port}const t=e&&e.forceBase64;this.supportsBinary=fn&&!t,this.opts.withCredentials&&(this.cookieJar=void 0)}get name(){return"polling"}doOpen(){this.poll()}pause(e){this.readyState="pausing";const t=()=>{this.readyState="paused",e()};if(this.polling||!this.writable){let s=0;this.polling&&(s++,this.once("pollComplete",function(){--s||t()})),this.writable||(s++,this.once("drain",function(){--s||t()}))}else t()}poll(){this.polling=!0,this.doPoll(),this.emitReserved("poll")}onData(e){const t=s=>{if(this.readyState==="opening"&&s.type==="open"&&this.onOpen(),s.type==="close")return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(s)};jt(e,this.socket.binaryType).forEach(t),this.readyState!=="closed"&&(this.polling=!1,this.emitReserved("pollComplete"),this.readyState==="open"&&this.poll())}doClose(){const e=()=>{this.write([{type:"close"}])};this.readyState==="open"?e():this.once("open",e)}write(e){this.writable=!1,Xt(e,t=>{this.doWrite(t,()=>{this.writable=!0,this.emitReserved("drain")})})}uri(){const e=this.opts.secure?"https":"http",t=this.query||{};return this.opts.timestampRequests!==!1&&(t[this.opts.timestampParam]=mt()),!this.supportsBinary&&!t.sid&&(t.b64=1),this.createUri(e,t)}request(e={}){return Object.assign(e,{xd:this.xd,cookieJar:this.cookieJar},this.opts),new O(this.uri(),e)}doWrite(e,t){const s=this.request({method:"POST",data:e});s.on("success",t),s.on("error",(i,r)=>{this.onError("xhr post error",i,r)})}doPoll(){const e=this.request();e.on("data",this.onData.bind(this)),e.on("error",(t,s)=>{this.onError("xhr poll error",t,s)}),this.pollXhr=e}}class O extends g{constructor(e,t){super(),le(this,t),this.opts=t,this.method=t.method||"GET",this.uri=e,this.data=t.data!==void 0?t.data:null,this.create()}create(){var e;const t=pt(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");t.xdomain=!!this.opts.xd;const s=this.xhr=new bt(t);try{s.open(this.method,this.uri,!0);try{if(this.opts.extraHeaders){s.setDisableHeaderCheck&&s.setDisableHeaderCheck(!0);for(let i in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(i)&&s.setRequestHeader(i,this.opts.extraHeaders[i])}}catch{}if(this.method==="POST")try{s.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch{}try{s.setRequestHeader("Accept","*/*")}catch{}(e=this.opts.cookieJar)===null||e===void 0||e.addCookies(s),"withCredentials"in s&&(s.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(s.timeout=this.opts.requestTimeout),s.onreadystatechange=()=>{var i;s.readyState===3&&((i=this.opts.cookieJar)===null||i===void 0||i.parseCookies(s)),s.readyState===4&&(s.status===200||s.status===1223?this.onLoad():this.setTimeoutFn(()=>{this.onError(typeof s.status=="number"?s.status:0)},0))},s.send(this.data)}catch(i){this.setTimeoutFn(()=>{this.onError(i)},0);return}typeof document<"u"&&(this.index=O.requestsCount++,O.requests[this.index]=this)}onError(e){this.emitReserved("error",e,this.xhr),this.cleanup(!0)}cleanup(e){if(!(typeof this.xhr>"u"||this.xhr===null)){if(this.xhr.onreadystatechange=ln,e)try{this.xhr.abort()}catch{}typeof document<"u"&&delete O.requests[this.index],this.xhr=null}}onLoad(){const e=this.xhr.responseText;e!==null&&(this.emitReserved("data",e),this.emitReserved("success"),this.cleanup())}abort(){this.cleanup()}}O.requestsCount=0;O.requests={};if(typeof document<"u"){if(typeof attachEvent=="function")attachEvent("onunload",$e);else if(typeof addEventListener=="function"){const n="onpagehide"in v?"pagehide":"unload";addEventListener(n,$e,!1)}}function $e(){for(let n in O.requests)O.requests.hasOwnProperty(n)&&O.requests[n].abort()}const Pe=(()=>typeof Promise=="function"&&typeof Promise.resolve=="function"?e=>Promise.resolve().then(e):(e,t)=>t(e,0))(),Z=v.WebSocket||v.MozWebSocket,ze=!0,pn="arraybuffer",Xe=typeof navigator<"u"&&typeof navigator.product=="string"&&navigator.product.toLowerCase()==="reactnative";class gn extends Le{constructor(e){super(e),this.supportsBinary=!e.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const e=this.uri(),t=this.opts.protocols,s=Xe?{}:pt(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(s.headers=this.opts.extraHeaders);try{this.ws=ze&&!Xe?t?new Z(e,t):new Z(e):new Z(e,t,s)}catch(i){return this.emitReserved("error",i)}this.ws.binaryType=this.socket.binaryType,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=e=>this.onClose({description:"websocket connection closed",context:e}),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError("websocket error",e)}write(e){this.writable=!1;for(let t=0;t<e.length;t++){const s=e[t],i=t===e.length-1;Be(s,this.supportsBinary,r=>{const o={};try{ze&&this.ws.send(r)}catch{}i&&Pe(()=>{this.writable=!0,this.emitReserved("drain")},this.setTimeoutFn)})}}doClose(){typeof this.ws<"u"&&(this.ws.close(),this.ws=null)}uri(){const e=this.opts.secure?"wss":"ws",t=this.query||{};return this.opts.timestampRequests&&(t[this.opts.timestampParam]=mt()),this.supportsBinary||(t.b64=1),this.createUri(e,t)}check(){return!!Z}}class mn extends Le{get name(){return"webtransport"}doOpen(){typeof WebTransport=="function"&&(this.transport=new WebTransport(this.createUri("https"),this.opts.transportOptions[this.name]),this.transport.closed.then(()=>{this.onClose()}).catch(e=>{this.onError("webtransport error",e)}),this.transport.ready.then(()=>{this.transport.createBidirectionalStream().then(e=>{const t=Gt(Number.MAX_SAFE_INTEGER,this.socket.binaryType),s=e.readable.pipeThrough(t).getReader(),i=Qt();i.readable.pipeTo(e.writable),this.writer=i.writable.getWriter();const r=()=>{s.read().then(({done:a,value:c})=>{a||(this.onPacket(c),r())}).catch(a=>{})};r();const o={type:"open"};this.query.sid&&(o.data=`{"sid":"${this.query.sid}"}`),this.writer.write(o).then(()=>this.onOpen())})}))}write(e){this.writable=!1;for(let t=0;t<e.length;t++){const s=e[t],i=t===e.length-1;this.writer.write(s).then(()=>{i&&Pe(()=>{this.writable=!0,this.emitReserved("drain")},this.setTimeoutFn)})}}doClose(){var e;(e=this.transport)===null||e===void 0||e.close()}}const yn={websocket:gn,webtransport:mn,polling:dn},bn=/^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,_n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];function Te(n){if(n.length>2e3)throw"URI too long";const e=n,t=n.indexOf("["),s=n.indexOf("]");t!=-1&&s!=-1&&(n=n.substring(0,t)+n.substring(t,s).replace(/:/g,";")+n.substring(s,n.length));let i=bn.exec(n||""),r={},o=14;for(;o--;)r[_n[o]]=i[o]||"";return t!=-1&&s!=-1&&(r.source=e,r.host=r.host.substring(1,r.host.length-1).replace(/;/g,":"),r.authority=r.authority.replace("[","").replace("]","").replace(/;/g,":"),r.ipv6uri=!0),r.pathNames=wn(r,r.path),r.queryKey=vn(r,r.query),r}function wn(n,e){const t=/\/{2,9}/g,s=e.replace(t,"/").split("/");return(e.slice(0,1)=="/"||e.length===0)&&s.splice(0,1),e.slice(-1)=="/"&&s.splice(s.length-1,1),s}function vn(n,e){const t={};return e.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,function(s,i,r){i&&(t[i]=r)}),t}let _t=class U extends g{constructor(e,t={}){super(),this.binaryType=pn,this.writeBuffer=[],e&&typeof e=="object"&&(t=e,e=null),e?(e=Te(e),t.hostname=e.host,t.secure=e.protocol==="https"||e.protocol==="wss",t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=Te(t.host).host),le(this,t),this.secure=t.secure!=null?t.secure:typeof location<"u"&&location.protocol==="https:",t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||(typeof location<"u"?location.hostname:"localhost"),this.port=t.port||(typeof location<"u"&&location.port?location.port:this.secure?"443":"80"),this.transports=t.transports||["polling","websocket","webtransport"],this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,addTrailingSlash:!0,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!1},t),this.opts.path=this.opts.path.replace(/\/$/,"")+(this.opts.addTrailingSlash?"/":""),typeof this.opts.query=="string"&&(this.opts.query=cn(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,typeof addEventListener=="function"&&(this.opts.closeOnBeforeunload&&(this.beforeunloadEventListener=()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},addEventListener("beforeunload",this.beforeunloadEventListener,!1)),this.hostname!=="localhost"&&(this.offlineEventListener=()=>{this.onClose("transport close",{description:"network connection lost"})},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(e){const t=Object.assign({},this.opts.query);t.EIO=dt,t.transport=e,this.id&&(t.sid=this.id);const s=Object.assign({},this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port},this.opts.transportOptions[e]);return new yn[e](s)}open(){let e;if(this.opts.rememberUpgrade&&U.priorWebsocketSuccess&&this.transports.indexOf("websocket")!==-1)e="websocket";else if(this.transports.length===0){this.setTimeoutFn(()=>{this.emitReserved("error","No transports available")},0);return}else e=this.transports[0];this.readyState="opening";try{e=this.createTransport(e)}catch{this.transports.shift(),this.open();return}e.open(),this.setTransport(e)}setTransport(e){this.transport&&this.transport.removeAllListeners(),this.transport=e,e.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",t=>this.onClose("transport close",t))}probe(e){let t=this.createTransport(e),s=!1;U.priorWebsocketSuccess=!1;const i=()=>{s||(t.send([{type:"ping",data:"probe"}]),t.once("packet",h=>{if(!s)if(h.type==="pong"&&h.data==="probe"){if(this.upgrading=!0,this.emitReserved("upgrading",t),!t)return;U.priorWebsocketSuccess=t.name==="websocket",this.transport.pause(()=>{s||this.readyState!=="closed"&&(l(),this.setTransport(t),t.send([{type:"upgrade"}]),this.emitReserved("upgrade",t),t=null,this.upgrading=!1,this.flush())})}else{const f=new Error("probe error");f.transport=t.name,this.emitReserved("upgradeError",f)}}))};function r(){s||(s=!0,l(),t.close(),t=null)}const o=h=>{const f=new Error("probe error: "+h);f.transport=t.name,r(),this.emitReserved("upgradeError",f)};function a(){o("transport closed")}function c(){o("socket closed")}function u(h){t&&h.name!==t.name&&r()}const l=()=>{t.removeListener("open",i),t.removeListener("error",o),t.removeListener("close",a),this.off("close",c),this.off("upgrading",u)};t.once("open",i),t.once("error",o),t.once("close",a),this.once("close",c),this.once("upgrading",u),this.upgrades.indexOf("webtransport")!==-1&&e!=="webtransport"?this.setTimeoutFn(()=>{s||t.open()},200):t.open()}onOpen(){if(this.readyState="open",U.priorWebsocketSuccess=this.transport.name==="websocket",this.emitReserved("open"),this.flush(),this.readyState==="open"&&this.opts.upgrade){let e=0;const t=this.upgrades.length;for(;e<t;e++)this.probe(this.upgrades[e])}}onPacket(e){if(this.readyState==="opening"||this.readyState==="open"||this.readyState==="closing")switch(this.emitReserved("packet",e),this.emitReserved("heartbeat"),this.resetPingTimeout(),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emitReserved("data",e.data),this.emitReserved("message",e.data);break}}onHandshake(e){this.emitReserved("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.maxPayload=e.maxPayload,this.onOpen(),this.readyState!=="closed"&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn(()=>{this.onClose("ping timeout")},this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,this.writeBuffer.length===0?this.emitReserved("drain"):this.flush()}flush(){if(this.readyState!=="closed"&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const e=this.getWritablePackets();this.transport.send(e),this.prevBufferLen=e.length,this.emitReserved("flush")}}getWritablePackets(){if(!(this.maxPayload&&this.transport.name==="polling"&&this.writeBuffer.length>1))return this.writeBuffer;let t=1;for(let s=0;s<this.writeBuffer.length;s++){const i=this.writeBuffer[s].data;if(i&&(t+=sn(i)),s>0&&t>this.maxPayload)return this.writeBuffer.slice(0,s);t+=2}return this.writeBuffer}write(e,t,s){return this.sendPacket("message",e,t,s),this}send(e,t,s){return this.sendPacket("message",e,t,s),this}sendPacket(e,t,s,i){if(typeof t=="function"&&(i=t,t=void 0),typeof s=="function"&&(i=s,s=null),this.readyState==="closing"||this.readyState==="closed")return;s=s||{},s.compress=s.compress!==!1;const r={type:e,data:t,options:s};this.emitReserved("packetCreate",r),this.writeBuffer.push(r),i&&this.once("flush",i),this.flush()}close(){const e=()=>{this.onClose("forced close"),this.transport.close()},t=()=>{this.off("upgrade",t),this.off("upgradeError",t),e()},s=()=>{this.once("upgrade",t),this.once("upgradeError",t)};return(this.readyState==="opening"||this.readyState==="open")&&(this.readyState="closing",this.writeBuffer.length?this.once("drain",()=>{this.upgrading?s():e()}):this.upgrading?s():e()),this}onError(e){U.priorWebsocketSuccess=!1,this.emitReserved("error",e),this.onClose("transport error",e)}onClose(e,t){(this.readyState==="opening"||this.readyState==="open"||this.readyState==="closing")&&(this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),typeof removeEventListener=="function"&&(removeEventListener("beforeunload",this.beforeunloadEventListener,!1),removeEventListener("offline",this.offlineEventListener,!1)),this.readyState="closed",this.id=null,this.emitReserved("close",e,t),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(e){const t=[];let s=0;const i=e.length;for(;s<i;s++)~this.transports.indexOf(e[s])&&t.push(e[s]);return t}};_t.protocol=dt;function En(n,e="",t){let s=n;t=t||typeof location<"u"&&location,n==null&&(n=t.protocol+"//"+t.host),typeof n=="string"&&(n.charAt(0)==="/"&&(n.charAt(1)==="/"?n=t.protocol+n:n=t.host+n),/^(https?|wss?):\/\//.test(n)||(typeof t<"u"?n=t.protocol+"//"+n:n="https://"+n),s=Te(n)),s.port||(/^(http|ws)$/.test(s.protocol)?s.port="80":/^(http|ws)s$/.test(s.protocol)&&(s.port="443")),s.path=s.path||"/";const r=s.host.indexOf(":")!==-1?"["+s.host+"]":s.host;return s.id=s.protocol+"://"+r+":"+s.port+e,s.href=s.protocol+"://"+r+(t&&t.port===s.port?"":":"+s.port),s}const kn=typeof ArrayBuffer=="function",Tn=n=>typeof ArrayBuffer.isView=="function"?ArrayBuffer.isView(n):n.buffer instanceof ArrayBuffer,wt=Object.prototype.toString,An=typeof Blob=="function"||typeof Blob<"u"&&wt.call(Blob)==="[object BlobConstructor]",On=typeof File=="function"||typeof File<"u"&&wt.call(File)==="[object FileConstructor]";function xe(n){return kn&&(n instanceof ArrayBuffer||Tn(n))||An&&n instanceof Blob||On&&n instanceof File}function se(n,e){if(!n||typeof n!="object")return!1;if(Array.isArray(n)){for(let t=0,s=n.length;t<s;t++)if(se(n[t]))return!0;return!1}if(xe(n))return!0;if(n.toJSON&&typeof n.toJSON=="function"&&arguments.length===1)return se(n.toJSON(),!0);for(const t in n)if(Object.prototype.hasOwnProperty.call(n,t)&&se(n[t]))return!0;return!1}function Rn(n){const e=[],t=n.data,s=n;return s.data=Ae(t,e),s.attachments=e.length,{packet:s,buffers:e}}function Ae(n,e){if(!n)return n;if(xe(n)){const t={_placeholder:!0,num:e.length};return e.push(n),t}else if(Array.isArray(n)){const t=new Array(n.length);for(let s=0;s<n.length;s++)t[s]=Ae(n[s],e);return t}else if(typeof n=="object"&&!(n instanceof Date)){const t={};for(const s in n)Object.prototype.hasOwnProperty.call(n,s)&&(t[s]=Ae(n[s],e));return t}return n}function Cn(n,e){return n.data=Oe(n.data,e),delete n.attachments,n}function Oe(n,e){if(!n)return n;if(n&&n._placeholder===!0){if(typeof n.num=="number"&&n.num>=0&&n.num<e.length)return e[n.num];throw new Error("illegal attachments")}else if(Array.isArray(n))for(let t=0;t<n.length;t++)n[t]=Oe(n[t],e);else if(typeof n=="object")for(const t in n)Object.prototype.hasOwnProperty.call(n,t)&&(n[t]=Oe(n[t],e));return n}const Sn=["connect","connect_error","disconnect","disconnecting","newListener","removeListener"],Bn=5;var d;(function(n){n[n.CONNECT=0]="CONNECT",n[n.DISCONNECT=1]="DISCONNECT",n[n.EVENT=2]="EVENT",n[n.ACK=3]="ACK",n[n.CONNECT_ERROR=4]="CONNECT_ERROR",n[n.BINARY_EVENT=5]="BINARY_EVENT",n[n.BINARY_ACK=6]="BINARY_ACK"})(d||(d={}));class Nn{constructor(e){this.replacer=e}encode(e){return(e.type===d.EVENT||e.type===d.ACK)&&se(e)?this.encodeAsBinary({type:e.type===d.EVENT?d.BINARY_EVENT:d.BINARY_ACK,nsp:e.nsp,data:e.data,id:e.id}):[this.encodeAsString(e)]}encodeAsString(e){let t=""+e.type;return(e.type===d.BINARY_EVENT||e.type===d.BINARY_ACK)&&(t+=e.attachments+"-"),e.nsp&&e.nsp!=="/"&&(t+=e.nsp+","),e.id!=null&&(t+=e.id),e.data!=null&&(t+=JSON.stringify(e.data,this.replacer)),t}encodeAsBinary(e){const t=Rn(e),s=this.encodeAsString(t.packet),i=t.buffers;return i.unshift(s),i}}function je(n){return Object.prototype.toString.call(n)==="[object Object]"}class qe extends g{constructor(e){super(),this.reviver=e}add(e){let t;if(typeof e=="string"){if(this.reconstructor)throw new Error("got plaintext data when reconstructing a packet");t=this.decodeString(e);const s=t.type===d.BINARY_EVENT;s||t.type===d.BINARY_ACK?(t.type=s?d.EVENT:d.ACK,this.reconstructor=new Ln(t),t.attachments===0&&super.emitReserved("decoded",t)):super.emitReserved("decoded",t)}else if(xe(e)||e.base64)if(this.reconstructor)t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emitReserved("decoded",t));else throw new Error("got binary data when not reconstructing a packet");else throw new Error("Unknown type: "+e)}decodeString(e){let t=0;const s={type:Number(e.charAt(0))};if(d[s.type]===void 0)throw new Error("unknown packet type "+s.type);if(s.type===d.BINARY_EVENT||s.type===d.BINARY_ACK){const r=t+1;for(;e.charAt(++t)!=="-"&&t!=e.length;);const o=e.substring(r,t);if(o!=Number(o)||e.charAt(t)!=="-")throw new Error("Illegal attachments");s.attachments=Number(o)}if(e.charAt(t+1)==="/"){const r=t+1;for(;++t&&!(e.charAt(t)===","||t===e.length););s.nsp=e.substring(r,t)}else s.nsp="/";const i=e.charAt(t+1);if(i!==""&&Number(i)==i){const r=t+1;for(;++t;){const o=e.charAt(t);if(o==null||Number(o)!=o){--t;break}if(t===e.length)break}s.id=Number(e.substring(r,t+1))}if(e.charAt(++t)){const r=this.tryParse(e.substr(t));if(qe.isPayloadValid(s.type,r))s.data=r;else throw new Error("invalid payload")}return s}tryParse(e){try{return JSON.parse(e,this.reviver)}catch{return!1}}static isPayloadValid(e,t){switch(e){case d.CONNECT:return je(t);case d.DISCONNECT:return t===void 0;case d.CONNECT_ERROR:return typeof t=="string"||je(t);case d.EVENT:case d.BINARY_EVENT:return Array.isArray(t)&&(typeof t[0]=="number"||typeof t[0]=="string"&&Sn.indexOf(t[0])===-1);case d.ACK:case d.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&(this.reconstructor.finishedReconstruction(),this.reconstructor=null)}}class Ln{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const t=Cn(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}const Pn=Object.freeze(Object.defineProperty({__proto__:null,Decoder:qe,Encoder:Nn,get PacketType(){return d},protocol:Bn},Symbol.toStringTag,{value:"Module"}));function E(n,e,t){return n.on(e,t),function(){n.off(e,t)}}const xn=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class vt extends g{constructor(e,t,s){super(),this.connected=!1,this.recovered=!1,this.receiveBuffer=[],this.sendBuffer=[],this._queue=[],this._queueSeq=0,this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=t,s&&s.auth&&(this.auth=s.auth),this._opts=Object.assign({},s),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const e=this.io;this.subs=[E(e,"open",this.onopen.bind(this)),E(e,"packet",this.onpacket.bind(this)),E(e,"error",this.onerror.bind(this)),E(e,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected?this:(this.subEvents(),this.io._reconnecting||this.io.open(),this.io._readyState==="open"&&this.onopen(),this)}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...t){if(xn.hasOwnProperty(e))throw new Error('"'+e.toString()+'" is a reserved event name');if(t.unshift(e),this._opts.retries&&!this.flags.fromQueue&&!this.flags.volatile)return this._addToQueue(t),this;const s={type:d.EVENT,data:t};if(s.options={},s.options.compress=this.flags.compress!==!1,typeof t[t.length-1]=="function"){const o=this.ids++,a=t.pop();this._registerAckCallback(o,a),s.id=o}const i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return this.flags.volatile&&(!i||!this.connected)||(this.connected?(this.notifyOutgoingListeners(s),this.packet(s)):this.sendBuffer.push(s)),this.flags={},this}_registerAckCallback(e,t){var s;const i=(s=this.flags.timeout)!==null&&s!==void 0?s:this._opts.ackTimeout;if(i===void 0){this.acks[e]=t;return}const r=this.io.setTimeoutFn(()=>{delete this.acks[e];for(let o=0;o<this.sendBuffer.length;o++)this.sendBuffer[o].id===e&&this.sendBuffer.splice(o,1);t.call(this,new Error("operation has timed out"))},i);this.acks[e]=(...o)=>{this.io.clearTimeoutFn(r),t.apply(this,[null,...o])}}emitWithAck(e,...t){const s=this.flags.timeout!==void 0||this._opts.ackTimeout!==void 0;return new Promise((i,r)=>{t.push((o,a)=>s?o?r(o):i(a):i(o)),this.emit(e,...t)})}_addToQueue(e){let t;typeof e[e.length-1]=="function"&&(t=e.pop());const s={id:this._queueSeq++,tryCount:0,pending:!1,args:e,flags:Object.assign({fromQueue:!0},this.flags)};e.push((i,...r)=>s!==this._queue[0]?void 0:(i!==null?s.tryCount>this._opts.retries&&(this._queue.shift(),t&&t(i)):(this._queue.shift(),t&&t(null,...r)),s.pending=!1,this._drainQueue())),this._queue.push(s),this._drainQueue()}_drainQueue(e=!1){if(!this.connected||this._queue.length===0)return;const t=this._queue[0];t.pending&&!e||(t.pending=!0,t.tryCount++,this.flags=t.flags,this.emit.apply(this,t.args))}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){typeof this.auth=="function"?this.auth(e=>{this._sendConnectPacket(e)}):this._sendConnectPacket(this.auth)}_sendConnectPacket(e){this.packet({type:d.CONNECT,data:this._pid?Object.assign({pid:this._pid,offset:this._lastOffset},e):e})}onerror(e){this.connected||this.emitReserved("connect_error",e)}onclose(e,t){this.connected=!1,delete this.id,this.emitReserved("disconnect",e,t)}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case d.CONNECT:e.data&&e.data.sid?this.onconnect(e.data.sid,e.data.pid):this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case d.EVENT:case d.BINARY_EVENT:this.onevent(e);break;case d.ACK:case d.BINARY_ACK:this.onack(e);break;case d.DISCONNECT:this.ondisconnect();break;case d.CONNECT_ERROR:this.destroy();const s=new Error(e.data.message);s.data=e.data.data,this.emitReserved("connect_error",s);break}}onevent(e){const t=e.data||[];e.id!=null&&t.push(this.ack(e.id)),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const s of t)s.apply(this,e)}super.emit.apply(this,e),this._pid&&e.length&&typeof e[e.length-1]=="string"&&(this._lastOffset=e[e.length-1])}ack(e){const t=this;let s=!1;return function(...i){s||(s=!0,t.packet({type:d.ACK,id:e,data:i}))}}onack(e){const t=this.acks[e.id];typeof t=="function"&&(t.apply(this,e.data),delete this.acks[e.id])}onconnect(e,t){this.id=e,this.recovered=t&&this._pid===t,this._pid=t,this.connected=!0,this.emitBuffered(),this.emitReserved("connect"),this._drainQueue(!0)}emitBuffered(){this.receiveBuffer.forEach(e=>this.emitEvent(e)),this.receiveBuffer=[],this.sendBuffer.forEach(e=>{this.notifyOutgoingListeners(e),this.packet(e)}),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach(e=>e()),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:d.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}timeout(e){return this.flags.timeout=e,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let s=0;s<t.length;s++)if(e===t[s])return t.splice(s,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(e),this}prependAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(e),this}offAnyOutgoing(e){if(!this._anyOutgoingListeners)return this;if(e){const t=this._anyOutgoingListeners;for(let s=0;s<t.length;s++)if(e===t[s])return t.splice(s,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(e){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const t=this._anyOutgoingListeners.slice();for(const s of t)s.apply(this,e.data)}}}function H(n){n=n||{},this.ms=n.min||100,this.max=n.max||1e4,this.factor=n.factor||2,this.jitter=n.jitter>0&&n.jitter<=1?n.jitter:0,this.attempts=0}H.prototype.duration=function(){var n=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),t=Math.floor(e*this.jitter*n);n=Math.floor(e*10)&1?n+t:n-t}return Math.min(n,this.max)|0};H.prototype.reset=function(){this.attempts=0};H.prototype.setMin=function(n){this.ms=n};H.prototype.setMax=function(n){this.max=n};H.prototype.setJitter=function(n){this.jitter=n};class Re extends g{constructor(e,t){var s;super(),this.nsps={},this.subs=[],e&&typeof e=="object"&&(t=e,e=void 0),t=t||{},t.path=t.path||"/socket.io",this.opts=t,le(this,t),this.reconnection(t.reconnection!==!1),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor((s=t.randomizationFactor)!==null&&s!==void 0?s:.5),this.backoff=new H({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(t.timeout==null?2e4:t.timeout),this._readyState="closed",this.uri=e;const i=t.parser||Pn;this.encoder=new i.Encoder,this.decoder=new i.Decoder,this._autoConnect=t.autoConnect!==!1,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection}reconnectionAttempts(e){return e===void 0?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var t;return e===void 0?this._reconnectionDelay:(this._reconnectionDelay=e,(t=this.backoff)===null||t===void 0||t.setMin(e),this)}randomizationFactor(e){var t;return e===void 0?this._randomizationFactor:(this._randomizationFactor=e,(t=this.backoff)===null||t===void 0||t.setJitter(e),this)}reconnectionDelayMax(e){var t;return e===void 0?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,(t=this.backoff)===null||t===void 0||t.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&this.backoff.attempts===0&&this.reconnect()}open(e){if(~this._readyState.indexOf("open"))return this;this.engine=new _t(this.uri,this.opts);const t=this.engine,s=this;this._readyState="opening",this.skipReconnect=!1;const i=E(t,"open",function(){s.onopen(),e&&e()}),r=a=>{this.cleanup(),this._readyState="closed",this.emitReserved("error",a),e?e(a):this.maybeReconnectOnOpen()},o=E(t,"error",r);if(this._timeout!==!1){const a=this._timeout,c=this.setTimeoutFn(()=>{i(),r(new Error("timeout")),t.close()},a);this.opts.autoUnref&&c.unref(),this.subs.push(()=>{this.clearTimeoutFn(c)})}return this.subs.push(i),this.subs.push(o),this}connect(e){return this.open(e)}onopen(){this.cleanup(),this._readyState="open",this.emitReserved("open");const e=this.engine;this.subs.push(E(e,"ping",this.onping.bind(this)),E(e,"data",this.ondata.bind(this)),E(e,"error",this.onerror.bind(this)),E(e,"close",this.onclose.bind(this)),E(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(e){try{this.decoder.add(e)}catch(t){this.onclose("parse error",t)}}ondecoded(e){Pe(()=>{this.emitReserved("packet",e)},this.setTimeoutFn)}onerror(e){this.emitReserved("error",e)}socket(e,t){let s=this.nsps[e];return s?this._autoConnect&&!s.active&&s.connect():(s=new vt(this,e,t),this.nsps[e]=s),s}_destroy(e){const t=Object.keys(this.nsps);for(const s of t)if(this.nsps[s].active)return;this._close()}_packet(e){const t=this.encoder.encode(e);for(let s=0;s<t.length;s++)this.engine.write(t[s],e.options)}cleanup(){this.subs.forEach(e=>e()),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(e,t){this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e,t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();this._reconnecting=!0;const s=this.setTimeoutFn(()=>{e.skipReconnect||(this.emitReserved("reconnect_attempt",e.backoff.attempts),!e.skipReconnect&&e.open(i=>{i?(e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",i)):e.onreconnect()}))},t);this.opts.autoUnref&&s.unref(),this.subs.push(()=>{this.clearTimeoutFn(s)})}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}const K={};function ie(n,e){typeof n=="object"&&(e=n,n=void 0),e=e||{};const t=En(n,e.path||"/socket.io"),s=t.source,i=t.id,r=t.path,o=K[i]&&r in K[i].nsps,a=e.forceNew||e["force new connection"]||e.multiplex===!1||o;let c;return a?c=new Re(s,e):(K[i]||(K[i]=new Re(s,e)),c=K[i]),t.query&&!e.query&&(e.query=t.queryKey),c.socket(t.path,e)}Object.assign(ie,{Manager:Re,Socket:vt,io:ie,connect:ie});function Qe(n,e,t){const s=n.slice();return s[6]=e[t],s}function Ge(n){let e,t,s=n[6]+"",i,r;return{c(){e=x("span"),t=N("[ "),i=N(s),r=N(" ]"),L(e,"background-color",F(n[6]))},m(o,a){T(o,e,a),B(e,t),B(e,i),B(e,r)},p(o,a){a&4&&s!==(s=o[6]+"")&&st(i,s),a&4&&L(e,"background-color",F(o[6]))},d(o){o&&k(e)}}}function qn(n){let e,t,s,i,r,o,a,c,u,l,h=oe(n[2]),f=[];for(let p=0;p<h.length;p+=1)f[p]=Ge(Qe(n,h,p));function y(p){n[5](p)}let C={blips:n[0],counter:1,author:n[1],io:n[3]};return n[2]!==void 0&&(C.authors=n[2]),c=new ct({props:C}),$.push(()=>Se(c,"authors",y)),{c(){e=x("div"),t=N("Current Author: "),s=N(n[1]),i=re(),r=x("div"),o=N(`Authors:
  `);for(let p=0;p<f.length;p+=1)f[p].c();a=re(),ae(c.$$.fragment),L(e,"background-color",F(n[1]))},m(p,b){T(p,e,b),B(e,t),B(e,s),T(p,i,b),T(p,r,b),B(r,o);for(let S=0;S<f.length;S+=1)f[S]&&f[S].m(r,null);T(p,a,b),z(c,p,b),l=!0},p(p,[b]){if((!l||b&2)&&st(s,p[1]),(!l||b&2)&&L(e,"background-color",F(p[1])),b&4){h=oe(p[2]);let w;for(w=0;w<h.length;w+=1){const De=Qe(p,h,w);f[w]?f[w].p(De,b):(f[w]=Ge(De),f[w].c(),f[w].m(r,null))}for(;w<f.length;w+=1)f[w].d(1);f.length=h.length}const S={};b&1&&(S.blips=p[0]),b&2&&(S.author=p[1]),!u&&b&4&&(u=!0,S.authors=p[2],Ce(()=>u=!1)),c.$set(S)},i(p){l||(_(c.$$.fragment,p),l=!0)},o(p){A(c.$$.fragment,p),l=!1},d(p){p&&(k(e),k(i),k(r),k(a)),tt(f,p),X(c,p)}}}function Dn(n,e,t){const s=ie("http://localhost:5000");let{author:i}=e,{blips:r}=e,{slug:o}=e;console.log("AUTHOR",i),console.log("BLIPS",r);let a=new Set([i]);s.on("content",async()=>{let u=`http://localhost:5000/doc/${o}`,h=await(await fetch(`${u}?author=${i}`)).json();t(0,r=[h])}),console.log("raw log"),Ot(()=>{console.log("loading page")});function c(u){a=u,t(2,a)}return n.$$set=u=>{"author"in u&&t(1,i=u.author),"blips"in u&&t(0,r=u.blips),"slug"in u&&t(4,o=u.slug)},[r,i,a,s,o,c]}class In extends ue{constructor(e){super(),he(this,e,Dn,qn,ce,{author:1,blips:0,slug:4})}}let me=document.getElementById("data");new In({target:document.getElementById("page"),props:{author:me.dataset.author,blips:JSON.parse(me.dataset.blips),slug:me.dataset.slug}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
